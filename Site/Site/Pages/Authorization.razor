@page "/Authorization"
@using Backend.Data._MySQL.Objects;
@using Backend.Data;
@using Backend.Authorization;
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;
@using Newtonsoft.Json.Linq;
@using Blazored.SessionStorage;
@inject NavigationManager navManager;
@inject ISessionStorageService sessionStorage

<h3>Auth</h3>

@code {
    private string Text = "Something Really Went Wrong";

    protected override async void OnInitialized()
    {
        Uri uri = navManager.ToAbsoluteUri(navManager.Uri);

        Dictionary<string, StringValues> Query = QueryHelpers.ParseQuery(uri.Query),
            _State;

        StringValues State, Identifier, AuthMode;

        if (Query.TryGetValue("state", out State))
        {
            _State = QueryHelpers.ParseQuery(State);

            if (_State.TryGetValue("auth_mode", out AuthMode) && _State.TryGetValue("identifier", out Identifier))
            {
                Ident ident = Identifiers.FindIdent(Identifier.First());

                if (ident != null)
                {
                    Text = "Processing";
                    await PerformAuth(AuthMode, Query, ident);
                }
                else Text = "A Fault Occurred Please Try Again";
            }
            else Text = "Auth URL Failure";
        }
        else Text = "Auth URL Failure";

        StateHasChanged();
    }

    private async Task PerformAuth(StringValues AuthMode, Dictionary<string, StringValues> Query, Ident ident)
    {
        switch (AuthMode.First())
        {
            case "discord-bot" when Query.TryGetValue("guild_id", out StringValues Guild):

                CurrencyParticipant p = CurrencyParticipant.FindStreamer(ident.Streamer.Id).First(x => x.currencyid == ident.CurrencyConfig);
                p.discord_guild = Guild.First();
                p.Update();

                Text = "Successfully Registered Bot";
                break;

            case "twitch-login" when Query.TryGetValue("code", out StringValues Code):
                JToken Res = await OAuth.PerformOAuth("https://id.twitch.tv/oauth2/token?client_id=" + Config.Conf.twitch_sign_client_id + "&client_secret=" + Config.Conf.twitch_sign_client_secret + "&code=" + Code + "&grant_type=authorization_code&redirect_uri=" + Config.Conf.oAuthRedirect);
                if (Res != null)
                {
                    await sessionStorage.SetItemAsync("twitch-token", Res["access_token"].ToString());
                    navManager.NavigateTo("Profile");
                    Text = "Successfully Signed In";
                }
                else Text = "A Fault Occurred Please Try Again";
                break;

            default:
                Text = "A Fault Occurred Please Try Again";
                break;
        }

        StateHasChanged();
        return;
    }

}

<p>@Text</p>