@page "/Link"
@using Backend.Data;
@using Backend.Integrations;
@using Backend.Authorization;
@using Site.Backend.Data._MySQL.Objects;
@using Site.Backend.Data.Generics;
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Primitives;
@using Newtonsoft.Json.Linq;
@using Blazored.SessionStorage;
@inject NavigationManager navManager;
@inject ISessionStorageService sessionStorage

<h1>Profile</h1>

<h2>State: @State</h2>

@code {
        string State = "Please Sign In";

        JToken t_Data, d_Data;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;

        t_Data = await AuthAction.GetTwitchLogin(navManager, sessionStorage, "Link");
        if (t_Data != null) d_Data = await AuthAction.GetDiscordLogin(navManager, sessionStorage, "Link");

        if (t_Data != null && d_Data != null)
        {
            State = "Performed Link";

            UserAccount Twitch = UserAccount.Find(new User(t_Data["display_name"].ToString(), Source.Twitch)),
                Discord = UserAccount.Find(new User(d_Data["id"].ToString(), Source.Discord));

            User completedU = new User(t_Data["display_name"].ToString(), d_Data["id"].ToString());

            if (Twitch.Id == Discord.Id)
            {
                State = "Accounts already linked";
            }
            else if (Twitch==null && Discord == null)
            {
                UserAccount n = new UserAccount(completedU);
                n.Insert();
            }
            else if (Twitch != null && Discord != null)
            {
                _userInfo[] tBals = DataHandler.FindUser(Twitch.user),
                    dBals = DataHandler.FindUser(Discord.user);

                if (tBals != null && dBals != null)
                {
                    foreach (_userInfo t in tBals)
                    {
                        _userInfo d = dBals.First(x => x.currency == t.currency);
                        if (d != null) { d.balance += t.balance; d.Update(); }
                    }
                }

                Twitch.Delete();
                Discord.user = completedU;
                Discord.Update();
            }
            else if (Twitch != null)
            {
                Twitch.user = completedU;
                Twitch.Update();
            }
            else
            {
                Discord.user = completedU;
                Discord.Update();
            }
        }

        StateHasChanged();
    }

}